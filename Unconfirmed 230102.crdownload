#!/usr/bin/env python
# coding: utf-8

# In[13]:


# 1.Write a program to find all pairs of an integer array whose sum is equal to a given number
# 2.Write a program to reverse an array in place? In place means you cannot create a new array.

def pairs(array,summ):
    for i in range(len(array)):
        for j in range(i+1,len(array)):
            if ((array[i]+array[j])==summ):
                print(array[i],array[j])
array=[1,2,3,4,5,6,7]
summ=7
pairs(array,summ)
print("Original array is:",array)
reverse=array[::-1]
print("Reverse of the array:",reverse)


# In[1]:


# 4.Write a program to print the first non-repeated character from a string?
string="sudarshan"
index=-1
func = ""
for i in string:
    if string.count(i)==1:
        func += i
        break
    else:
        index+=1
if index == 1:
    print("All characters are repeating ")
else:
    print("First non repeating character is: ",func)


# In[2]:


# 5.Read about the Tower of Hanoi algorithm. Write a program to implement it.
def TowerOfHanoi(n, from_rod, to_rod, aux_rod):
    if n == 0:
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)
    print("Move disk", n,"from_rod", from_rod,"to_rod", to_rod)
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)
    
N=3
TowerOfHanoi(N,'A','B','C')


# In[3]:


#6.Write a program to convert postfix to prefix expression.
def isOperator(x):
    if x == "+":
        return True
    if x == "-":
        return True
    if x == "/":
        return True
    if x == "*":
        return True
    return False
def postToPre(post_exp):
    s = []
    length = len(post_exp)
    for i in range(length):
        if (isOperator(post_exp[i])):
            op1 = s[-1]
            s.pop()
            op2 = s[-1]
            s.pop()
            temp = post_exp[i] + op2 + op1
            s.append(temp)
        else:
            s.append(post_exp[i])
    ans = ""
    for i in s:
        ans += i
    return ans
if __name__ == "__main__":
    post_exp = "AB+CD-"
    print("Prefix : ", postToPre(post_exp))


# In[6]:


#7.Write a program to convert prefix expression to infix expression.
def prefixToInfix(prefix):
    stack = []

    i = len(prefix) - 1
    while i >= 0:
        if not isOperator(prefix[i]):

            stack.append(prefix[i])
            i -= 1
        else:

            str = "(" + stack.pop() + prefix[i] + stack.pop() + ")"
            stack.append(str)
            i -= 1

    return stack.pop()

def isOperator(c):
    if c == "*" or c == "+" or c == "-" or c == "/" or c == "^" or c == "(" or c == ")":
        return True
    else:
        return False

if __name__=="__main__":
    str = "*-A/BC-/AKL"
    print(prefixToInfix(str))


# In[4]:


#8. Write a program to check if all the brackets are closed in a given code snippet.
def areBracketsBalanced(expr):
    stack = []

    for char in expr:
        if char in ["(", "{", "["]:
            stack.append(char)
        else:
            if not stack:
                return False
            current_char = stack.pop()
            if current_char == '(':
                if char != ")":
                    return False
            if current_char == '{':
                if char != "}":
                    return False
            if current_char == '[':
                if char != "]":
                    return False
    if stack:
        return False
    return True

if __name__ == "__main__":
    expr = "{()}[]"
    if areBracketsBalanced(expr):
        print("Balanced")
    else:
        print("Not Balanced")


# In[5]:


#9.  Write a program to reverse a stack.
class Stack:
    def __init__(self):
        self.Elements = []
    def push(self, value):
        self.Elements.append(value)
    def pop(self):
        return self.Elements.pop()
    def empty(self):
        return self.Elements == []
    def show(self):
        for value in reversed(self.Elements):
            print(value)
def BottomInsert(s, value):
    if s.empty():
        s.push(value)
    else:
        popped = s.pop()
        BottomInsert(s, value)
        s.push(popped)
def Reverse(s):
    if s.empty():
        pass
    else:
        popped = s.pop()
        Reverse(s)
        BottomInsert(s, popped)
stk = Stack()
stk.push(1)
stk.push(2)
stk.push(3)
stk.push(4)
stk.push(5)
 
print("Original Stack")
stk.show()
 
print("\nStack after Reversing")
Reverse(stk)
stk.show()


# In[14]:


#10. Write a program to find the smallest number using a stack.
class Node:
    
    def __init__(self, value):
        self.value = value
   
    def __str__(self):
        return "Node({})".format(self.value)
  
    __repr__ = __str__
  
  
class Stack:
  
    def __init__(self):
        self.top = None
        self.count = 0
        self.minimum = None
  
   
    def __str__(self):
        temp = self.top
        out = []
        while temp:
            out.append(str(temp.value))
            temp = temp.next
        out = '\n'.join(out)
        return ('Top {} \n\nStack :\n{}'.format(self.top, out))
  
   
    __repr__ = __str__
  
    
    def getMin(self):
        if self.top is None:
            return "Stack is empty"
        else:
            print("Minimum Element in the stack is: {}" .format(self.minimum))
  
   
    def isEmpty(self):
      
        if self.top == None:
            return True
        else:
          
            return False
  
   
    def __len__(self):
        self.count = 0
        tempNode = self.top
        while tempNode:
            tempNode = tempNode.next
            self.count += 1
        return self.count
  
   
    def peek(self):
        if self.top is None:
            print("Stack is empty")
        else:
            if self.top.value < self.minimum:
                print("Top Most Element is: {}" .format(self.minimum))
            else:
                print("Top Most Element is: {}" .format(self.top.value))
  
  
    def push(self, value):
        if self.top is None:
            self.top = Node(value)
            self.minimum = value
  
        elif value < self.minimum:
            temp = (2 * value) - self.minimum
            new_node = Node(temp)
            new_node.next = self.top
            self.top = new_node
            self.minimum = value
        else:
            new_node = Node(value)
            new_node.next = self.top
            self.top = new_node
        print("Number Inserted: {}" .format(value))
  
   
    def pop(self):
        if self.top is None:
            print("Stack is empty")
        else:
            removedNode = self.top.value
            self.top = self.top.next
            if removedNode < self.minimum:
                print("Top Most Element Removed :{} " .format(self.minimum))
                self.minimum = ((2 * self.minimum) - removedNode)
            else:
                print("Top Most Element Removed : {}" .format(removedNode))
  
  

if __name__ == '__main__':
    s=Stack()
s.push(3)
s.push(5)
s.getMin()
s.push(2)
s.push(1)
s.getMin()
s.pop()
s.getMin()
s.pop()


# In[10]:


#3. Write a program to check if two strings are a rotation of each other?
def are_rotations(string1, string2):
    size1 = len(string1)
    size2 = len(string2)
    temp = ''
    
    if size1 != size2:
        return 0
    
    temp = string1 + string1
    
    if (temp.count(string2)> 0):
        return 1
    else:
        return 0

string1 = 'ABCDEF'
string2 = 'DEFABC'

if are_rotations(string1, string2):
    print ('The Strings are rotations of each other')
else:
    print ('The Strings are not rotations of each other')


# In[ ]:




